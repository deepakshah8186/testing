IMP :
1  Pagination and scrolling for large amount of data in UI application. Performance in UI
2. To load the child component we will make ngAfterViewInit() lifecycle method ( AfterViewInit lifecycle )
3.

IMP : use fetch api and useeffect in React to make the api call

n React, the UI can call the backend using various methods to send HTTP requests. The most common methods for making backend calls are:

Using fetch API (native JavaScript API)
Using Axios (a popular third-party library)
Using GraphQL (for APIs built with GraphQL)
1. Using fetch API
The fetch API is a modern, native JavaScript method to make HTTP requests. It returns a promise and is widely used in React applications.

Example:
Hereâ€™s an example of how to use fetch in React to call a backend and retrieve data:

javascript
Copy code
import React, { useEffect, useState } from 'react';

function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // This effect runs after the component renders
  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts/1') // URL of the backend API
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json(); // Parse JSON response
      })
      .then((data) => {
        setData(data); // Set the data from the response
        setLoading(false); // Set loading to false once the data is retrieved
      })
      .catch((error) => {
        setError(error);
        setLoading(false); // Handle error
      });
  }, []); // Empty dependency array means this effect runs only once after the initial render

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <div>
      <h1>Title: {data.title}</h1>
      <p>{data.body}</p>
    </div>
  );
}

export default App;
Explanation:
fetch('url'): Sends an HTTP request to the backend at the specified URL.
.then((response) => response.json()): Parses the response as JSON if the request is successful.
.catch((error) => setError(error)): Handles errors such as network issues or invalid responses.
useEffect(() => {}, []): Calls the fetch function after the component is rendered for the first time (componentDidMount equivalent).

********************************************************************************************************************************


1. Angular is a javascript binding framework which binds UI to model.MVVM framweowrk.Single page application using routers
2. AngulaJs uses javascript and contoller arictecture but Angular uses typescript and component architecture. Support for Ionic is there.
3. Directives helps to attach behaviuor to your html DOM.ngModel,hidden,{{}}
SAC(Structure-change structure of DOM (ngfor),Attribute(hidden),Component(<my-grid/>))
4. package.json - references of all javascript components,like pom has versions
5. Typescript adds types to javascript.It gives you OOP features.Write class,interface,extends with Typescript
6. CLI helps to create ready made project to kickstart with.npm install @angular/cli
ng new myapp
7. Binding code to bind view and model is called Components.Group of components is modules
8. Decorator says what type of class is it. @Component ,@NgModule means angular module
(You can create module by decorating it with annotation @NgModule)
9. Templates are html view in Angular.It can be html file or inline
  @Component({
    templateURL:
    template: inline
  })
 10. Data binding : Interpolation binding in html element,property binding [ngModel] ,event binding(click)="Toggle",2 way binding [(ngModel)] 
 11. Architecture of Angular
 12. SPA(Single page application) : load once and dont load it again and again. Angular routing.
 HomeRoutes = [
  path: 'Login' ,component: LoginComponent
  path: 'Home',component: HomeComponent
 ]
 In MasterPage.html,define router link and outlet
 <[routerLink]=["Home"]Home
 <[routerLink]=["Customer"]Customer

 <router-outlet></router-outlet>

 if you want to do from component use this.router.navigate["Home"]
 13. Lazy loading means on demand loading. Project needs to be divided into seperate modules like home,customers and then use loadChildren in HomeRoutes
 14. DI is the design pattern,common service,rather than creating an instance.In constructor we are asking to inject from outside.
 We do by adding the class in providers property in @Ngmodule
 @Ngmodule
 providers: [
  Token,
  AuthGuard,
  { provide: BaseLogger,useClass: HttpLogger}
 ]
 15. Difference between ngserve and ngbuild : ng serve builds in RAM,good for local testing. ng build() --prod does in drive in Prod.Compressed js file,minify
